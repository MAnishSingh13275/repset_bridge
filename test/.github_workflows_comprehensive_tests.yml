name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.21]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential sqlite3

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install sqlite3

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install sqlite

    - name: Download dependencies
      run: go mod download

    - name: Build test binary
      run: go build -o gym-door-bridge-test ./cmd
      env:
        CGO_ENABLED: 1

    - name: Run Integration Tests
      run: go test ./test/integration/... -v -race -timeout=15m
      env:
        CGO_ENABLED: 1

    - name: Run Load Tests
      run: go test ./test/load/... -v -race -timeout=20m
      env:
        CGO_ENABLED: 1

    - name: Run Security Tests
      run: go test ./test/security/... -v -race -timeout=15m
      env:
        CGO_ENABLED: 1

    - name: Run End-to-End Tests
      run: go test ./test/e2e/... -v -race -timeout=30m
      env:
        CGO_ENABLED: 1

    - name: Run Comprehensive Test Suite
      run: go test ./test -v -race -timeout=60m -run=TestComprehensiveSuite
      env:
        CGO_ENABLED: 1

    - name: Validate Requirements Coverage
      run: go test ./test -v -run=TestRequirementValidation
      env:
        CGO_ENABLED: 1

    - name: Generate Coverage Report
      run: |
        go test ./test/... -v -race -cover -coverprofile=coverage.out -timeout=60m
        go tool cover -html=coverage.out -o coverage.html
      env:
        CGO_ENABLED: 1

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.os }}
        path: |
          coverage.out
          coverage.html

    - name: Run Benchmarks
      run: go test ./test -bench=. -benchmem -timeout=30m
      env:
        CGO_ENABLED: 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  performance-regression:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Run Performance Benchmarks
      run: |
        go test ./test -bench=. -benchmem -count=5 -timeout=30m > benchmark.txt
        cat benchmark.txt

    - name: Store Benchmark Results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'go'
        output-file-path: benchmark.txt
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, security-scan, performance-regression]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate Test Summary
      run: |
        echo "# Comprehensive Test Suite Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Comprehensive Tests: ${{ needs.comprehensive-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Regression: ${{ needs.performance-regression.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports have been generated for all platforms and are available in the artifacts." >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, security-scan, performance-regression]
    if: failure()
    steps:
    - name: Notify Team
      run: |
        echo "Comprehensive test suite failed. Please check the logs and fix any issues."
        # Add notification logic here (Slack, email, etc.)